version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5

references:
  common_environment: &common_environment
    ROS_WS: "/opt/ros_ws"
    UNDERLAY_WS: "/opt/underlay_ws"
    OVERLAY_WS: "/opt/overlay_ws"
    CCACHE_LOGFILE: "/tmp/ccache.log"
    CCACHE_MAXSIZE: "200M"
    MAKEFLAGS: "-j 1 -l 2"
    RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED: "1"
    RETEST_UNTIL_PASS: "2"
  common_commands: &common_commands
    restore_from_cache:
      description: "Restore From Cache"
      parameters:
        key:
          type: string
        workspace:
          type: string
      steps:
        - restore_cache:
            name: Restore Cache << parameters.key >>
            key: "<< parameters.key >>-v1\
              -{{ arch }}\
              -{{ .Branch }}\
              -{{ .Environment.CIRCLE_PR_NUMBER }}\
              -{{ checksum  \"<< parameters.workspace >>/checksum.txt\" }}"
    save_to_cache:
      description: "Save To Cache"
      parameters:
        key:
          type: string
        workspace:
          type: string
        path:
          type: string
        when:
          type: string
          default: on_success
      steps:
        - save_cache:
            name: Save Cache << parameters.key >>
            key: "<< parameters.key >>-v1\
              -{{ arch }}\
              -{{ .Branch }}\
              -{{ .Environment.CIRCLE_PR_NUMBER }}\
              -{{ checksum  \"<< parameters.workspace >>/checksum.txt\" }}\
              -{{ epoch }}"
            paths:
              - << parameters.path >>
            when: << parameters.when >>
    install_dependencies:
      description: "Install Dependencies"
      parameters:
        underlay:
          type: string
        workspace:
          type: string
      steps:
        - run:
            name: Install Dependencies | << parameters.workspace >>
            working_directory: << parameters.workspace >>
            command: |
              . << parameters.underlay >>/install/setup.sh
              cat << parameters.underlay >>/checksum.txt > checksum.txt
              vcs export --exact src | \
                (echo vcs_export && cat) >> checksum.txt
              sha256sum $PWD/checksum.txt >> checksum.txt
              apt-get update
              rosdep update
              dependencies=$(
                rosdep install -q -y \
                  --from-paths src \
                  --ignore-src \
                  --skip-keys " \
                    slam_toolbox \
                    " \
                  --verbose | \
                awk '$1 ~ /^resolution\:/' | \
                awk -F'[][]' '{print $2}' | \
                tr -d \, | xargs -n1 | sort -u | xargs)
              dpkg -s $dependencies | \
                (echo workspace_dependencies && cat) >> checksum.txt
              sha256sum $PWD/checksum.txt >> checksum.txt
    setup_workspace:
      description: "Setup Workspace"
      parameters:
        underlay:
          type: string
        key:
          type: string
        workspace:
          type: string
        mixins:
          type: string
        build:
          default: true
          type: boolean
      steps:
        - store_artifacts:
            path: << parameters.workspace >>/checksum.txt
        - restore_from_cache:
            key: << parameters.key >>
            workspace: << parameters.workspace >>
        - when:
            condition: << parameters.build >>
            steps:
              - run:
                  name: Build Workspace | << parameters.workspace >>
                  working_directory: << parameters.workspace >>
                  command: |
                    if [ -d install ] && [ ! -f build_failed ]
                    then
                      echo "Skipping Build"
                    else
                      . << parameters.underlay >>/install/setup.sh
                      rm -rf build install log
                      colcon build \
                        --symlink-install \
                        --mixin << parameters.mixins >>
                      rm -f build_failed
                    fi
              - save_to_cache:
                  key: << parameters.key >>
                  path: << parameters.workspace >>
                  workspace: << parameters.workspace >>
              - run:
                  name: Copy Build Logs
                  working_directory: << parameters.workspace >>
                  command: cp -rH log/latest_build log/build
                  when: always
              - store_artifacts:
                    path: << parameters.workspace >>/log/build
    test_workspace:
      description: "Test Workspace"
      parameters:
        workspace:
          type: string
      steps:
        - run:
            name: Test Workspace | << parameters.workspace >>
            working_directory: << parameters.workspace >>
            command: |
              . install/setup.sh
              TEST_PACKAGES=$(
                colcon list --names-only | \
                  circleci tests split \
                    --split-by=timings \
                    --timings-type=classname \
                    --show-counts | \
                  xargs)
              set -o xtrace
              colcon test \
                --packages-select ${TEST_PACKAGES}
              colcon test \
                --packages-select ${TEST_PACKAGES} \
                --packages-select-test-failures \
                --retest-until-pass ${RETEST_UNTIL_PASS} \
                --ctest-args --test-regex "test_.*"
              colcon test-result \
                --verbose
        - run:
            name: Copy Test Logs
            working_directory: << parameters.workspace >>
            command: cp -rH log/latest_test log/test
            when: always
        - store_artifacts:
            path: << parameters.workspace >>/log/test
        - run:
            name: Copy Test Results
            working_directory: << parameters.workspace >>
            command: |
              mkdir test_results/
              cp -rH build/*/test_results/* test_results
            when: always
        - store_test_results:
            path: << parameters.workspace >>/test_results
        - store_artifacts:
            path: << parameters.workspace >>/test_results
  pre_checkout: &pre_checkout
    run:
      name: Pre Checkout
      command: |
        mkdir -p $ROS_WS && cd $ROS_WS
        ln -s /opt/ros/$ROS_DISTRO install
        echo $CACHE_NONCE | \
          (echo cache_nonce && cat) >> checksum.txt
        sha256sum $PWD/checksum.txt >> checksum.txt
        TZ=utc stat -c '%y' /ros_entrypoint.sh | \
          (echo ros_entrypoint && cat) >> checksum.txt
        sha256sum $PWD/checksum.txt >> checksum.txt
        rm -rf $OVERLAY_WS/*
  on_checkout: &on_checkout
    checkout:
      path: src/navigation2
  post_checkout: &post_checkout
    run:
      name: Post Checkout
      command: |
        if ! cmp \
          $OVERLAY_WS/src/navigation2/tools/ros2_dependencies.repos \
          $UNDERLAY_WS/ros2_dependencies.repos >/dev/null 2>&1
        then
          echo "Cleaning Underlay"
          rm -rf $UNDERLAY_WS/*
          cp $OVERLAY_WS/src/navigation2/tools/ros2_dependencies.repos \
            $UNDERLAY_WS/ros2_dependencies.repos
          mkdir -p $UNDERLAY_WS/src
          vcs import $UNDERLAY_WS/src \
            < $UNDERLAY_WS/ros2_dependencies.repos
        fi
  install_underlay_dependencies: &install_underlay_dependencies
    install_dependencies:
      underlay: /opt/ros_ws
      workspace: /opt/underlay_ws
  restore_ccache: &restore_ccache
    restore_from_cache:
      key: ccache
      workspace: /opt/underlay_ws
  ccache_stats: &ccache_stats
    run:
      name: CCache Stats
      command: |
        ccache -s # show stats
        ccache -z # zero stats
        ccache -V # show version
        ccache -p # show config
  setup_underlay_workspace: &setup_underlay_workspace
    setup_workspace: &setup_workspace_underlay
      key: underlay_ws
      underlay: /opt/ros_ws
      workspace: /opt/underlay_ws
      mixins: ${UNDERLAY_MIXINS}
  restore_underlay_workspace: &restore_underlay_workspace
    setup_workspace:
      <<: *setup_workspace_underlay
      build: false
  install_overlay_dependencies: &install_overlay_dependencies
    install_dependencies:
      underlay: /opt/underlay_ws
      workspace: /opt/overlay_ws
  setup_overlay_workspace: &setup_overlay_workspace
    setup_workspace: &setup_workspace_overlay
      key: overlay_ws
      underlay: /opt/underlay_ws
      workspace: /opt/overlay_ws
      mixins: ${OVERLAY_MIXINS}
  restore_overlay_workspace: &restore_overlay_workspace
    setup_workspace:
      <<: *setup_workspace_overlay
      build: false
  store_ccache_logs: &store_ccache_logs
    store_artifacts:
        path: /tmp/ccache.log
  save_ccache: &save_ccache
    save_to_cache:
      key: ccache
      workspace: /opt/underlay_ws
      path: ~/.ccache
      when: always
  test_overlay_workspace: &test_overlay_workspace
    test_workspace:
      workspace: /opt/overlay_ws
  collect_overlay_coverage: &collect_overlay_coverage
    run:
      name: Collect Code Coverage
      working_directory: /opt/overlay_ws
      command: src/navigation2/tools/code_coverage_report.bash ci
      when: always
  upload_overlay_coverage: &upload_overlay_coverage
    codecov/upload:
      file: lcov/project_coverage.info
      flags: project
      when: always

commands:
  <<: *common_commands
  checkout_source:
    description: "Checkout Source"
    steps:
      - *pre_checkout
      - *on_checkout
      - *post_checkout
  setup_dependencies:
    description: "Setup Dependencies"
    steps:
      - *install_underlay_dependencies
      - *restore_ccache
      - *ccache_stats
      - *setup_underlay_workspace
      - *ccache_stats
      - *install_overlay_dependencies
  build_source:
    description: "Build Source"
    steps:
      - *setup_overlay_workspace
      - *store_ccache_logs
      - *ccache_stats
      - *save_ccache
  restore_build:
    description: "Restore Build"
    steps:
      - checkout_source
      - *install_underlay_dependencies
      - *restore_underlay_workspace
      - *install_overlay_dependencies
      - *restore_overlay_workspace
  test_build:
    description: "Test Build"
    steps:
      - *test_overlay_workspace
  report_coverage:
    description: "Report Coverage"
    steps:
      - *collect_overlay_coverage
      - *upload_overlay_coverage

executors:
  debug_exec:
    docker:
      - image: rosplanning/navigation2:master.debug
    working_directory: /opt/overlay_ws
    environment:
      <<: *common_environment
      CACHE_NONCE: "Debug"
      OVERLAY_MIXINS: "debug ccache coverage-gcc"
      UNDERLAY_MIXINS: "release ccache"
  release_exec:
    docker:
      - image: rosplanning/navigation2:master.release
    working_directory: /opt/overlay_ws
    environment:
      <<: *common_environment
      CACHE_NONCE: "Release"
      OVERLAY_MIXINS: "release ccache"
      UNDERLAY_MIXINS: "release ccache"

jobs:
  debug_build: &debug_build
    executor: debug_exec
    steps:
      - checkout_source
      - setup_dependencies
      - build_source
  release_build:
    executor: release_exec
    <<: *debug_build
  debug_test:
    executor: debug_exec
    parallelism: 1
    steps:
      - restore_build
      - test_build
      - report_coverage
  release_test: &release_test
    executor: release_exec
    parallelism: 1
    steps:
      - restore_build
      - test_build
  test_rmw_connext_cpp:
    <<: *release_test
    environment:
      RMW_IMPLEMENTATION: "rmw_connext_cpp"
  test_rmw_cyclonedds_cpp:
    <<: *release_test
    environment:
      RMW_IMPLEMENTATION: "rmw_cyclonedds_cpp"
  test_rmw_fastrtps_cpp:
    <<: *release_test
    environment:
      RMW_IMPLEMENTATION: "rmw_fastrtps_cpp"

workflows:
  version: 2
  build_and_test:
    jobs:
      - debug_build
      - debug_test:
          requires:
            - debug_build
      - release_build
      - release_test:
          requires:
            - release_build
  nightly:
    jobs:
      - debug_build
      - debug_test:
          requires:
            - debug_build
      - release_build
      # - test_rmw_connext_cpp:
      #     requires:
      #       - release_build
      - test_rmw_cyclonedds_cpp:
          requires:
            - release_build
      - test_rmw_fastrtps_cpp:
          requires:
            - release_build
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
